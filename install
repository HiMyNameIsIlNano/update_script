#!/bin/sh

__read_property(){
	local input="$@"
	temp=`cat ${config_file} | sed 's/\"//g' | grep -w ${input} | cut -d ":" -f2`
	echo ${temp##*|}
}

RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
NC='\033[0m' # No Color

default_dir=${HOME}/.local/scripts/update_script
config_file=${default_dir}/update.config
timestamp=$(date +%s)

mkdir -p ${default_dir}

cp update_ports ${default_dir}
chmod +x ${default_dir}/update_ports
if [ ! -f ${default_dir}/update.config ]
then
    cp update.config ${default_dir}
fi

cp update_world ${default_dir}
chmod +x ${default_dir}/update_world
if [ ! -f ${default_dir}/update_world.config ]
then
    cp update_world.config ${default_dir}
fi

cp update_pkg ${default_dir}
chmod +x ${default_dir}/update_pkg

cp update_wrapper ${default_dir}
chmod +x ${default_dir}/update_wrapper

cp update_with_xterm ${default_dir}
chmod +x ${default_dir}/update_with_xterm

update_ports_frequency_in_days=$(__read_property update_ports_frequency_in_days)
update_world_frequency_in_days=$(__read_property update_world_frequency_in_days)

cat >> /tmp/crontab_${timestamp}.tmp <<'EOF'
SHELL=/bin/sh
PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin
DISPLAY=:0.0
# Order of crontab fields
# minute	hour	mday	month	wday	command
EOF
echo "@daily ${default_dir}/update_wrapper -p >/dev/null 2>&1" >> /tmp/crontab_${timestamp}.tmp
echo "@daily ${default_dir}/update_wrapper -w >/dev/null 2>&1" >> /tmp/crontab_${timestamp}.tmp

crontab -l >/dev/null 2>&1
if [ $? -eq 1 ]
then
    # No crontab existing. Create an empty file
    cat >> /tmp/empty_crontab_${timestamp}.tmp <<'EOF'
SHELL=/bin/sh
PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin
DISPLAY=:0.0
# Order of crontab fields
# minute	hour	mday	month	wday	command
EOF
    cat /tmp/empty_crontab_${timestamp}.tmp | crontab -
    rm /tmp/empty_crontab_${timestamp}.tmp
fi

# Copy the current crontab into a temporary file
crontab -l > /tmp/current_crontab.tmp

n_changed_lines=$(diff /tmp/current_crontab.tmp /tmp/crontab_${timestamp}.tmp | wc -l)
if [ ${n_changed_lines} -gt 0 ]
then
    echo -e "${RED}***${NC} Using ${GREEN}sdiff${NC} to merge crontab files ${RED}***${NC}"
    echo -e "Type ${ORANGE}'l | 1'${NC} to accept the left changes or ${ORANGE}'r | 2'${NC} to accept the right changes: "
fi

# Merge the changes into a final file
sdiff -s -o /tmp/current_crontab.final /tmp/current_crontab.tmp /tmp/crontab_${timestamp}.tmp

# We do not need to append anything as the crontab has already been merged
#(crontab -l; cat /tmp/current_crontab.final) | crontab -

# Put the merged entries into the crontab file (overwrite old crontab)
cat /tmp/current_crontab.final | crontab -

# Check the crontab file before ending the script
crontab -e

rm /tmp/crontab_${timestamp}.tmp
rm /tmp/current_crontab.tmp
rm /tmp/current_crontab.final

exit 0
