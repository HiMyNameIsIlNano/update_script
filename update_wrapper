#!/bin/sh

# Print out the help
__usage(){
    echo "usage: update_wrapper [-p | [-w | [-h]]]"
}

__read_property(){
	local input="$@"
	temp=`cat ${config_file} | sed 's/\"//g' | grep -w ${input} | cut -d ":" -f2`
	echo ${temp##*|}
}

__confirm(){
	printf 'press [ENTER] to continue'
	read dummy
}

__error(){
	printf 'The default directory does not exist'
	printf '\n'
	printf 'press [ENTER] to finish'
	read dummy 
}

__end(){
	printf 'The user has no right to update'
	printf '\n'
	printf 'press [ENTER] to finish'
	read dummy 
}

__is_user_allowed_to_update(){
	local updater_group="$1"
	local group=$(id -G -n $(whoami) | grep -o ${updater_group})
	if [ "${group}" == "${updater_group}" ]; then
		echo true
	else
		echo false
	fi
}

default_dir=${HOME}/.local/scripts
config_file=${default_dir}/update.config
config_world_file=${default_dir}/update_world.config
update_ports_log=${default_dir}/update_ports.log
update_world_log=${default_dir}/update_world.log
batch_update=''
f_port="true"
f_world="false"

while [ "$1" != "" ]; do
    case $1 in
        -p | --ports )			shift
                                f_port="true"
                                f_world="false"
                                ;;
        -w | --world )          shift
                                f_world="true"
                                f_port="false"
                                ;;
        -h | --help )           __usage
                                exit
                                ;;
        * )                     __usage
                                exit 1
    esac
done

batch_update_flag=$(__read_property batch)
update_with=$(__read_property update_with)
updater_group=$(__read_property updater_group)
is_user_allowed_to_update=$(__is_user_allowed_to_update ${updater_group})
xterm=$(command -v xterm)

if [ "${is_user_allowed_to_update}" == "false" ]; then
    __end
    exit 1
fi

if [ ! -d "${default_dir}" ]; then
  __error
  exit 1
fi

if [ "${batch_update_flag}" == "true" ]; then
	batch_update='-b'
fi

if [ "${f_port}" == "true" ]; then
	__confirm

	if [ "${update_with}" == "pkg" ]; then
		#xterm -title "Update Ports with PKG" -e su root -c "${HOME}/.local/scripts/update_pkg"
		${xterm} -title "Update Ports with PKG" -hold -e "${HOME}/.local/scripts/update_pkg"
	elif [ "${update_with}" == "port" ]; then
		${xterm} -title "Update Ports with PORTUPGRADE" -hold -e su root -c "${HOME}/.local/scripts/update_ports ${batch_update}"
	else
		echo "[ERROR] Option not recognised"
		exit 1
	fi
fi

if [ "${f_world}" == "true" ]; then
	__confirm
	${xterm} -title "Update World" -hold -e su root -c "${HOME}/.local/scripts/update_world -c ${config_world_file}"
fi

exit 0
