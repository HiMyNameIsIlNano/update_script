#!/bin/sh

# Print out the help
__usage(){
    echo "usage: update_wrapper [-p | [-w | [-h]]]"
}

__read_property(){
	local input="$@"
	temp=`cat ${config_file} | sed 's/\"//g' | grep -w ${input} | cut -d ":" -f2`
	echo ${temp##*|}
}

__confirm(){
	printf 'press [ENTER] to continue'
	read dummy
}

__error(){
	printf 'The default directory does not exist'
	printf '\n'
	printf 'press [ENTER] to finish'
	read dummy 
}

__end(){
	printf 'The user has no right to update'
	printf '\n'
	printf 'press [ENTER] to finish'
	read dummy 
}

__is_user_allowed_to_update(){
	local updater_group="$1"
	local group=$(id -G -n $(whoami) | grep -o ${updater_group})
	if [ "${group}" == "${updater_group}" ]; then
		echo true
	else
		echo false
	fi
}

__call_xterm(){
    local update_with="$1"
    if [ "${f_port}" == "true" ]; then
        /bin/sh ${default_dir}/update_with_xterm -p ${update_with}
    elif [ "${f_world}" == "true" ]; then
		/bin/sh ${default_dir}/update_with_xterm -w
    fi
}

__call_bash(){
    echo "TODO"
}

default_dir=${HOME}/.local/scripts/update_script
config_file=${default_dir}/update.config
batch_update=''
f_port="true"
f_world="false"

while [ "$1" != "" ]; do
    case $1 in
        -p | --ports )			shift
                                f_port="true"
                                f_world="false"
                                ;;
        -w | --world )          shift
                                f_world="true"
                                f_port="false"
                                ;;
        -h | --help )           __usage
                                exit
                                ;;
        * )                     __usage
                                exit 1
    esac
done

batch_update_flag=$(__read_property batch)
update_with=$(__read_property update_with)
updater_group=$(__read_property updater_group)
with_terminal=$(__read_property with_terminal)
is_user_allowed_to_update=$(__is_user_allowed_to_update ${updater_group})

if [ "${is_user_allowed_to_update}" == "false" ]; then
    __end
    exit 1
fi

if [ ! -d "${default_dir}" ]; then
  __error
  exit 1
fi

if [ "${batch_update_flag}" == "true" ]; then
	batch_update='-b'
fi


if [ "${with_terminal}" == "xterm" ]; then
    __call_xterm ${update_with}
elif [ "${with_terminal}" == "bash" ]; then
    __call_bash
    exit 1
else
    echo "[ERROR] Option not recognised"
    exit 1
fi

exit 0
