#!/bin/sh

__usage(){
    echo "usage: update_pkg [-c | [-h]]"
}

__wait_for_input(){
	printf 'press [ENTER] to continue'
	read dummy
}

__read_property(){
	input="$@"
	temp=`cat $config_file | sed 's/\"//g' | grep -w $input | cut -d ":" -f2`
	echo ${temp##*|}
}

__check_remote_changes() {
	UPSTREAM=${1:-'@{u}'}
	LOCAL=$(git rev-parse @)
	REMOTE=$(git rev-parse "$UPSTREAM")
	BASE=$(git merge-base @ "$UPSTREAM")

	if [ $LOCAL = $REMOTE ]; then
		echo "Up-to-date"
	elif [ $LOCAL = $BASE ]; then
		echo "Need to pull"
	elif [ $REMOTE = $BASE ]; then
		echo "Need to push"
	else
		echo "Diverged"
	fi
}

default_dir=${HOME}/.local/scripts/update_script
config_file=${default_dir}/update_ports.config
# TODO: Find a better name!
#sudo=$(command -v sudo)
#pkg=$(command -v pkg)

while [ "$1" != "" ]; do
    case $1 in
		-c | --config )		    shift
                                config_file=$1
                                echo $config_file
                                ;;
        -h | --help )           __usage
                                exit
                                ;;
        * )                     __usage
                                exit 1
    esac
    shift
done

# The list of locked ports must be comma separated with no empty space
locked_ports=$(__read_property locked_ports)
for locked_port in $(echo $locked_ports | sed "s/,/ /g")
do
    sudo pkg lock $locked_port
	__wait_for_input
done

sudo pkg stats
__wait_for_input
	
sudo pkg update
__wait_for_input

sudo pkg upgrade
__wait_for_input

# Even though the n option is listed in the pkg check manual, it does not seem to be a recognized option anyway...
#echo "Checking for missing dependencies..."
#${sudo} pkg check -n
#wait_for_input

echo "Checking for corrupted packages..."
sudo pkg check -sa
__wait_for_input

sudo pkg autoremove
__wait_for_input

sudo pkg clean
__wait_for_input

exit 0
